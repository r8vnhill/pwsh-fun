function Test-SSHConnection {
    [OutputType([SSHConnectionResult])]
    [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param (
        [Parameter(
            Mandatory,
            Position = 0,
            ValueFromPipeline,
            ValueFromPipelineByPropertyName
        )]
        [ValidateNotNullOrEmpty()]
        [Alias('Host', 'HostName')]
        [string[]] $RemoteHost,

        [Parameter()]
        [string[]] $SshOptions = @()
    )

    begin {
        Initialize-Command
    }

    process {
        foreach ($_host in $RemoteHost) {
            # preceding _ to avoid conflict with $host automatic variable
            if ($WhatIfPreference) {
                return [SSHConnectionResult]::From($_host, $true, 'Simulated success')
            }
            if ($PSCmdlet.ShouldProcess($_host, 'Test SSH connection')) {
                try {
                    Invoke-SSHSessionCheck -RemoteHost $_host -SshOptions $SshOptions
                } catch {
                    Write-Error "❌ Unexpected error while connecting to '$_host': $_"
                    [SSHConnectionResult]::From($_host, $false, $_.ToString())
                }
            }
        }
    }
}

<#
.SYNOPSIS
Ensures that required commands are available before continuing.

.DESCRIPTION
This helper function verifies that the `ssh` command is available in the system's PATH.
It throws an error if the command is not found, preventing downstream failures.
The function also writes a verbose message indicating that preparation is underway.

This function is typically used at the beginning of SSH-related scripts to ensure the runtime environment is properly set up.

.EXAMPLE
Initialize-Command

Checks for the `ssh` command and writes a verbose preparation message.

.NOTES
Intended for internal use in SSH-related tooling.
#>
function Script:Initialize-Command {
    . "$PSScriptRoot\..\Test-Command.ps1"
    if (-not (Test-Command -Command ssh).Exists) {
        throw '❌ SSH command not found in PATH.'
    }
    Write-Verbose 'Preparing to test SSH connections...'
}

<#
.SYNOPSIS
Performs a low-level SSH connectivity check against a remote host.

.DESCRIPTION
Attempts to initiate an SSH connection to the specified remote host using diagnostic mode (`-vT`) and any additional user-provided SSH options.
Captures the command output and returns an [SSHConnectionResult] instance indicating success or failure.

This function is designed for internal use by higher-level SSH test commands and avoids side effects such as user prompts or interactivity.

.OUTPUTS
[SSHConnectionResult]
Returns a structured object with connection status, raw output, and host information.

.EXAMPLE
$sessionResult = Invoke-SSHSessionCheck -RemoteHost 'user@example.com'

Attempts an SSH connection to the specified host and returns the result as an object.

.EXAMPLE
Invoke-SSHSessionCheck -RemoteHost 'host.example.com' -SshOptions @('-p', '2222')

Connects to the host on a non-standard port using additional SSH arguments.

.NOTES
This function assumes that the `ssh` command is available in the system's PATH.
A call to `Initialize-Command` should be made before using this function to ensure the SSH command is available.
#>
function Script:Invoke-SSHSessionCheck {
    param (
        # The hostname or IP address of the SSH target.
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string] $RemoteHost,
        # Optional array of additional SSH command-line arguments (e.g., `-i`, `-p`, etc.).
        [string[]] $SshOptions
    )
    $arguments = @('-vT', $RemoteHost) + $SshOptions
    Write-Verbose "Invoking SSH with arguments: $arguments"
    $global:LASTEXITCODE = 0
    $output = & ssh @arguments 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Warning "SSH connection to '$RemoteHost' failed."
        [SSHConnectionResult]::From($RemoteHost, $false, $output -join "`n")
    } else {
        Write-Verbose "SSH connection to '$RemoteHost' succeeded."
        [SSHConnectionResult]::From($RemoteHost, $true, $output -join "`n")
    }
}

<#
.SYNOPSIS
Represents the result of an SSH connection attempt.

.DESCRIPTION
Encapsulates the outcome of an SSH connection test, including the remote host, whether the connection succeeded, and any output generated by the SSH command.

Useful for standardized logging, reporting, and returning structured results from SSH test functions.

.EXAMPLE
$result = [SSHConnectionResult]::From('example.com', $false, 'Connection timed out.')
Write-Host $result.ToString()

Uses the factory method `From` to instantiate the object.
#>
class SSHConnectionResult {
    [string] $RemoteHost
    [bool] $Success
    [string] $Output

    # Constructor to initialize the SSHConnectionResult object.
    SSHConnectionResult([string] $RemoteHost, [bool] $Success, [string] $Output) {
        $this.RemoteHost = $RemoteHost
        $this.Success = $Success
        $this.Output = $Output
    }

    # Factory method to create a new SSHConnectionResult instance.
    static [SSHConnectionResult] From([string] $_host, [bool] $success, [string] $output) {
        return [SSHConnectionResult]::new($_host, $success, $output)
    }

    # Converts the SSHConnectionResult to a string representation.
    [string] ToString() {
        return if ($this.Success) {
            "✅ SSH connection to '$($this.RemoteHost)' succeeded."
        } else {
            "❌ SSH connection to '$($this.RemoteHost)' failed: $($this.Output)"
        }
    }
}
